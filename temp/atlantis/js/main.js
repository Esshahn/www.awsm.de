// Generated by CoffeeScript 1.9.0
(function() {
  var animate, bg, bg_texture, createBunny, displacementFilter, displacementFilter_logo, displacementTexture, fish, fish_texture, i, logo, logo_texture, offset, renderer, stage, texture, texture1, ui, ui_texture, x, y;

  renderer = PIXI.autoDetectRenderer(960, 554);

  createBunny = function(x, y) {
    var bunny;
    bunny = new PIXI.Sprite(texture);
    bunny.interactive = true;
    bunny.buttonMode = true;
    bunny.anchor.x = 0.5;
    bunny.anchor.y = 0.5;
    bunny.position.z = -y;
    bunny.mousedown = bunny.touchstart = function(data) {
      var cash, win;
      this.data = data.data;
      this.touchstart = false;
      this.mouseover = false;
      this.mouseout = false;
      win = Math.ceil(Math.random() * 10);
      console.log(win);
      if (win >= 8) {
        cash = Math.ceil(Math.random() * 10) / 10;
        this.texture = texture1;
        this.text = new PIXI.Text(cash, {
          font: '32px Arial',
          fill: '#ffffff',
          align: 'center'
        });
        this.text.position.x = this.position.x;
        this.text.position.y = this.position.y;
        return stage.addChild(this.text);
      } else {
        return this.alpha = 0.3;
      }
    };
    bunny.mouseup = bunny.mouseupoutside = bunny.touchend = bunny.touchendoutside = function(data) {
      this.dragging = false;
      return this.data = null;
    };
    bunny.mousemove = bunny.touchmove = function(data) {
      var newPosition;
      if (this.dragging) {
        this.data = data;
        newPosition = this.data.getLocalPosition(this.parent);
        this.position.x = newPosition.x;
        return this.position.y = newPosition.y;
      }
    };
    bunny.mouseover = function(data) {
      return this.rotation -= 0.1;
    };
    bunny.mouseout = function(data) {
      return this.rotation += 0.1;
    };
    bunny.position.x = x;
    bunny.position.y = y;
    bunny.scale.x = 0.7;
    bunny.scale.y = bunny.scale.x;
    return stage.addChild(bunny);
  };

  animate = function() {
    displacementFilter.offset.x += offset;
    displacementFilter.offset.y += offset;
    displacementFilter_logo.offset.x += offset * 0.3;
    displacementFilter_logo.offset.y += offset * 0.3;
    if (fish.position.x > 1000) {
      fish.position.x = -200;
      fish.position.y = Math.random() * 400;
      fish.scale.x = 0.1 + Math.random() / 3;
      fish.scale.y = fish.scale.x;
      fish.speed = 0.5 + Math.random();
    } else {
      fish.position.x += fish.speed;
    }
    fish.position.x;
    renderer.render(stage);
    return requestAnimationFrame(animate);
  };

  document.body.appendChild(renderer.view);

  stage = new PIXI.Stage(0x444444);

  texture = PIXI.Texture.fromImage('img/vase.png');

  texture1 = PIXI.Texture.fromImage('img/vase1.png');

  bg_texture = PIXI.Texture.fromImage('img/bg.png');

  ui_texture = PIXI.Texture.fromImage('img/ui.png');

  logo_texture = PIXI.Texture.fromImage('img/logo.png');

  fish_texture = PIXI.Texture.fromImage('img/Fish.png');

  bg = new PIXI.Sprite(bg_texture);

  ui = new PIXI.Sprite(ui_texture);

  logo = new PIXI.Sprite(logo_texture);

  fish = new PIXI.Sprite(fish_texture);

  stage.addChild(bg);

  stage.addChild(ui);

  stage.addChild(logo);

  fish.speed = 1;

  fish.position.y = Math.random() * 400;

  fish.scale.x = 0.2;

  fish.scale.y = fish.scale.x;

  bg.addChild(fish);

  x = 0;

  i = 1;

  while (i <= 9) {
    if (i >= 1 && i <= 3) {
      y = 100;
    }
    if (i >= 4 && i <= 6) {
      y = 250;
    }
    if (i >= 7 && i <= 9) {
      y = 400;
    }
    if (i === 4) {
      x = 0;
    }
    if (i === 7) {
      x = 0;
    }
    createBunny(540 + x, y);
    x = x + 160;
    i++;
  }

  displacementTexture = new PIXI.Texture.fromImage('img/displacement.png');

  displacementFilter = new PIXI.DisplacementFilter(displacementTexture);

  displacementFilter_logo = new PIXI.DisplacementFilter(displacementTexture);

  bg.filters = [displacementFilter];

  logo.filters = [displacementFilter_logo];

  offset = 0.3;

  stage.updateLayersOrder = function() {
    return stage.children.sort(function(a, b) {
      a.position.z = a.position.z || 0;
      b.position.z = b.position.z || 0;
      return b.position.z - a.position.z;
    });
  };

  stage.updateLayersOrder();

  animate();

}).call(this);
